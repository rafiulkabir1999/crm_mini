generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ----------------- User / Authentication -----------------
model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String
  role      String    @default("user")
  status    String    @default("active")
  phone     String?
  company   String?
  position  String?
  location  String?
  website   String?
  bio       String?
  avatar    String?
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  leads        Lead[]
  sales        Sale[]
  accounts     Account[]
  customers    Customer[]
  subscription UserSubscription? // Current active subscription
  usage        UserUsage? // Tracks user's consumption/metrics
  products     UserProduct[]
  landingPages UserLandingPage[]
}

// ----------------- Subscription Plans -----------------
model SubscriptionPlan {
  id            String             @id
  name          String
  price         Float
  landingPages  Int
  standardPages Int
  storage       Int
  teamMembers   Int
  users         UserSubscription[]
}

// ----------------- User Subscriptions -----------------
model UserSubscription {
  id                 String           @id @default(cuid())
  user               User             @relation(fields: [userId], references: [id])
  userId             String           @unique
  plan               SubscriptionPlan @relation(fields: [planId], references: [id])
  planId             String
  status             String
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean          @default(false)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

// ----------------- User Usage -----------------
model UserUsage {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique
  customers    Int      @default(0)
  leads        Int      @default(0)
  landingPages Int      @default(0)
  storageUsed  Int      @default(0)
  teamMembers  Int      @default(1)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// ----------------- Customer -----------------
model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String   @unique
  address   String?
  city      String?
  state     String?
  zipCode   String?
  company   String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  leads     Lead[]
  sales     Sale[]
  accounts  Account[]
  createdBy User      @relation(fields: [userId], references: [id])
  userId    String
}

// ----------------- Lead -----------------
model Lead {
  id                String    @id @default(cuid())
  interestedProduct String
  quantity          String
  leadSource        String
  status            String    @default("new")
  followUpDate      DateTime?
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  customer   Customer @relation(fields: [customerId], references: [id])
  createdBy  User     @relation(fields: [userId], references: [id])
  customerId String
  userId     String
}

// ----------------- Sale -----------------
model Sale {
  id        String   @id @default(cuid())
  product   String
  quantity  Int
  amount    Float
  currency  String   @default("USD")
  status    String   @default("pending")
  saleDate  DateTime @default(now())
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  customer   Customer @relation(fields: [customerId], references: [id])
  createdBy  User     @relation(fields: [userId], references: [id])
  customerId String
  userId     String
}

// ----------------- Account -----------------
model Account {
  id          String   @id @default(cuid())
  name        String
  type        String
  category    String
  amount      Float
  currency    String   @default("USD")
  date        DateTime @default(now())
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  customer   Customer? @relation(fields: [customerId], references: [id])
  createdBy  User      @relation(fields: [userId], references: [id])
  customerId String?
  userId     String
}

// ----------------- Product & Images -----------------
model Product {
  id          String           @id @default(uuid())
  name        String
  description String?
  price       Float
  status      String           @default("active")
  images      ProductImage[]
  reviews     Review[]
  packages    PackageProduct[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now())

  owners       UserProduct[]
  landingPages LandingPageProduct[]
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// ----------------- Package -----------------
model Package {
  id          String           @id @default(uuid())
  name        String
  description String?
  basePrice   Float            @default(0)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now())
  products    PackageProduct[]
  reviews     Review[]
}

model PackageProduct {
  id        String @id @default(uuid())
  packageId String
  productId String
  quantity  Int    @default(1)

  package Package @relation(fields: [packageId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([packageId, productId])
}

// ----------------- Review -----------------
model Review {
  id        String   @id @default(uuid())
  customer  String
  rating    Int
  comment   String?
  productId String?
  packageId String?
  createdAt DateTime @default(now())

  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  package Package? @relation(fields: [packageId], references: [id], onDelete: Cascade)
}

// ----------------- UserProduct (ownership) -----------------
model UserProduct {
  id        String @id @default(uuid())
  userId    String
  productId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

// ----------------- Landing Page -----------------
model LandingPage {
  id          String               @id @default(uuid())
  name        String
  url         String               @unique
  status      String               @default("active")
  views       Int                  @default(0)
  leads       Int                  @default(0)
  conversions Int                  @default(0)
  description String?
  products    LandingPageProduct[]
  users       UserLandingPage[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

// ----------------- Junction Table for LandingPage & Product -----------------
model LandingPageProduct {
  id            String      @id @default(uuid())
  landingPage   LandingPage @relation(fields: [landingPageId], references: [id], onDelete: Cascade)
  landingPageId String
  product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     String

  @@unique([landingPageId, productId])
}

// ----------------- Junction Table for User & LandingPage -----------------
model UserLandingPage {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  landingPage   LandingPage @relation(fields: [landingPageId], references: [id], onDelete: Cascade)
  landingPageId String

  @@unique([userId, landingPageId])
}
